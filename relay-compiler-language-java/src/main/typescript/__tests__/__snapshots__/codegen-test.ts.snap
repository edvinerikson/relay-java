// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`print(node) matches expected output: basic-query.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query GetCurrentBackOfficeAgentQuery {
  currentBackofficeAgent {
    __typename
    id
    name
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
public class GetCurrentBackOfficeAgentQuery extends Request {

  public GetCurrentBackOfficeAgentQuery() {
    super(
      "GetCurrentBackOfficeAgentQuery",
      Fragment
        .builder()
        .name("GetCurrentBackOfficeAgentQuery")
        .masked(true)
        .plural(false)
        .selections(
          Arrays.asList(
            LinkedField
              .builder()
              .name("currentBackofficeAgent")
              .alias("currentBackofficeAgent")
              .selections(
                Arrays.asList(
                  ScalarField
                    .builder()
                    .name("__typename")
                    .alias("__typename")
                    .build(),
                  ScalarField.builder().name("id").alias("id").build(),
                  ScalarField.builder().name("name").alias("name").build()
                )
              )
              .build()
          )
        )
        .build()
    );
  }
}

`;

exports[`print(node) matches expected output: query-with-alias.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query AliasedQuery {
  agent: currentBackofficeAgent {
    name
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
public class AliasedQuery extends Request {

  public AliasedQuery() {
    super(
      "AliasedQuery",
      Fragment
        .builder()
        .name("AliasedQuery")
        .masked(true)
        .plural(false)
        .selections(
          Arrays.asList(
            LinkedField
              .builder()
              .name("currentBackofficeAgent")
              .alias("agent")
              .selections(
                Arrays.asList(
                  ScalarField.builder().name("name").alias("name").build()
                )
              )
              .build()
          )
        )
        .build()
    );
  }
}

`;

exports[`print(node) matches expected output: query-with-arguments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query GetStaticPlayerQuery {
  player(playerUid: "123456789") {
    __typename
  }
}

query GetAllPlayersQuery {
  allPlayers(includeDeleted: true) {
    __typename
  }
}

query GetDeletedPostsQuery {
  posts(filter: { deleted: true }) {
    title
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
public class GetStaticPlayerQuery extends Request {

  public GetStaticPlayerQuery() {
    super(
      "GetStaticPlayerQuery",
      Fragment
        .builder()
        .name("GetStaticPlayerQuery")
        .masked(true)
        .plural(false)
        .selections(
          Arrays.asList(
            LinkedField
              .builder()
              .name("player")
              .alias("player")
              .selections(
                Arrays.asList(
                  ScalarField
                    .builder()
                    .name("__typename")
                    .alias("__typename")
                    .build()
                )
              )
              .build()
          )
        )
        .build()
    );
  }
}


public class GetAllPlayersQuery extends Request {

  public GetAllPlayersQuery() {
    super(
      "GetAllPlayersQuery",
      Fragment
        .builder()
        .name("GetAllPlayersQuery")
        .masked(true)
        .plural(false)
        .selections(
          Arrays.asList(
            LinkedField
              .builder()
              .name("allPlayers")
              .alias("allPlayers")
              .selections(
                Arrays.asList(
                  ScalarField
                    .builder()
                    .name("__typename")
                    .alias("__typename")
                    .build()
                )
              )
              .build()
          )
        )
        .build()
    );
  }
}


public class GetDeletedPostsQuery extends Request {

  public GetDeletedPostsQuery() {
    super(
      "GetDeletedPostsQuery",
      Fragment
        .builder()
        .name("GetDeletedPostsQuery")
        .masked(true)
        .plural(false)
        .selections(
          Arrays.asList(
            LinkedField
              .builder()
              .name("posts")
              .alias("posts")
              .selections(
                Arrays.asList(
                  ScalarField.builder().name("title").alias("title").build()
                )
              )
              .build()
          )
        )
        .build()
    );
  }
}

`;

exports[`print(node) matches expected output: query-with-conditional.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query ConditionalQuery {
  player {
    __typename
  }
  currentBackofficeAgent @include(if: false) {
    name
  }
}

query ConditionalVariableQuery($enabled: Boolean!) {
  currentBackofficeAgent @include(if: $enabled) {
    name
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
public class ConditionalQuery extends Request {

  public ConditionalQuery() {
    super(
      "ConditionalQuery",
      Fragment
        .builder()
        .name("ConditionalQuery")
        .masked(true)
        .plural(false)
        .selections(
          Arrays.asList(
            LinkedField
              .builder()
              .name("player")
              .alias("player")
              .selections(
                Arrays.asList(
                  ScalarField
                    .builder()
                    .name("__typename")
                    .alias("__typename")
                    .build()
                )
              )
              .build()
          )
        )
        .build()
    );
  }
}


public class ConditionalVariableQuery extends Request {

  public ConditionalVariableQuery() {
    super(
      "ConditionalVariableQuery",
      Fragment
        .builder()
        .name("ConditionalVariableQuery")
        .masked(true)
        .plural(false)
        .selections(
          Arrays.asList(
            Condition
              .builder()
              .condition("enabled")
              .passingValue(true)
              .selections(
                Arrays.asList(
                  LinkedField
                    .builder()
                    .name("currentBackofficeAgent")
                    .alias("currentBackofficeAgent")
                    .selections(
                      Arrays.asList(
                        ScalarField.builder().name("name").alias("name").build()
                      )
                    )
                    .build()
                )
              )
              .build()
          )
        )
        .build()
    );
  }
}

`;

exports[`print(node) matches expected output: query-with-fragments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query MyQuery {
  ...query_frag
  ... on Query {
    currentBackofficeAgent {
      name
      ...AgentData
    }
  }
}

fragment query_frag on Query @inline {
  __typename
}
fragment AgentData on BackofficeAgent {
  id
  name
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
public class MyQuery extends Request {

  public MyQuery() {
    super(
      "MyQuery",
      Fragment
        .builder()
        .name("MyQuery")
        .masked(true)
        .plural(false)
        .selections(
          Arrays.asList(
            LinkedField
              .builder()
              .name("currentBackofficeAgent")
              .alias("currentBackofficeAgent")
              .selections(
                Arrays.asList(
                  ScalarField.builder().name("name").alias("name").build(),
                  FragmentSpread.builder().name("AgentData").build()
                )
              )
              .build(),
            InlineDataFragmentSpread
              .builder()
              .name("query_frag")
              .selections(
                Arrays.asList(
                  ScalarField
                    .builder()
                    .name("__typename")
                    .alias("__typename")
                    .build()
                )
              )
              .build()
          )
        )
        .build()
    );
  }
}


public class query_frag extends InlineDataFragment {

  public query_frag() {
    super("query_frag");
  }
}


public class AgentData extends Fragment {

  public AgentData() {
    super(
      "AgentData",
      true,
      false,
      Arrays.asList(
        ScalarField.builder().name("id").alias("id").build(),
        ScalarField.builder().name("name").alias("name").build()
      )
    );
  }
}

`;

exports[`print(node) matches expected output: query-with-union.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query PlayerResultInlineFragmentQuery {
  player(playerUid: "123") {
    __typename
    ... on Player {
      username
    }
    ... on PlayerNotFound {
      message
    }
  }
}

query PlayerResultFragmentQuery {
  player(playerUid: "123") {
    __typename
    ...PlayerFragment
    ...PlayerNotFound
  }
}

fragment PlayerFragment on Player {
  username
}

fragment PlayerNotFound on PlayerNotFound {
  message
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
public class PlayerResultInlineFragmentQuery extends Request {

  public PlayerResultInlineFragmentQuery() {
    super(
      "PlayerResultInlineFragmentQuery",
      Fragment
        .builder()
        .name("PlayerResultInlineFragmentQuery")
        .masked(true)
        .plural(false)
        .selections(
          Arrays.asList(
            LinkedField
              .builder()
              .name("player")
              .alias("player")
              .selections(
                Arrays.asList(
                  ScalarField
                    .builder()
                    .name("__typename")
                    .alias("__typename")
                    .build(),
                  InlineFragment
                    .builder()
                    .type("Player")
                    .selections(
                      Arrays.asList(
                        ScalarField
                          .builder()
                          .name("username")
                          .alias("username")
                          .build()
                      )
                    )
                    .build(),
                  InlineFragment
                    .builder()
                    .type("PlayerNotFound")
                    .selections(
                      Arrays.asList(
                        ScalarField
                          .builder()
                          .name("message")
                          .alias("message")
                          .build()
                      )
                    )
                    .build()
                )
              )
              .build()
          )
        )
        .build()
    );
  }
}


public class PlayerResultFragmentQuery extends Request {

  public PlayerResultFragmentQuery() {
    super(
      "PlayerResultFragmentQuery",
      Fragment
        .builder()
        .name("PlayerResultFragmentQuery")
        .masked(true)
        .plural(false)
        .selections(
          Arrays.asList(
            LinkedField
              .builder()
              .name("player")
              .alias("player")
              .selections(
                Arrays.asList(
                  ScalarField
                    .builder()
                    .name("__typename")
                    .alias("__typename")
                    .build(),
                  FragmentSpread.builder().name("PlayerFragment").build(),
                  FragmentSpread.builder().name("PlayerNotFound").build()
                )
              )
              .build()
          )
        )
        .build()
    );
  }
}


public class PlayerFragment extends Fragment {

  public PlayerFragment() {
    super(
      "PlayerFragment",
      true,
      false,
      Arrays.asList(
        ScalarField.builder().name("username").alias("username").build()
      )
    );
  }
}


public class PlayerNotFound extends Fragment {

  public PlayerNotFound() {
    super(
      "PlayerNotFound",
      true,
      false,
      Arrays.asList(
        ScalarField.builder().name("message").alias("message").build()
      )
    );
  }
}

`;

exports[`print(node) matches expected output: query-with-variables.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query GetPlayerQuery($playerId: String) {
  player(playerUid: $playerId) {
    __typename
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
public class GetPlayerQuery extends Request {

  public GetPlayerQuery() {
    super(
      "GetPlayerQuery",
      Fragment
        .builder()
        .name("GetPlayerQuery")
        .masked(true)
        .plural(false)
        .selections(
          Arrays.asList(
            LinkedField
              .builder()
              .name("player")
              .alias("player")
              .selections(
                Arrays.asList(
                  ScalarField
                    .builder()
                    .name("__typename")
                    .alias("__typename")
                    .build()
                )
              )
              .build()
          )
        )
        .build()
    );
  }
}

`;

exports[`print(node) matches expected output: relay-directive.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment MyMaskedFragment on Query {
  currentBackofficeAgent {
    id
  }
}

fragment MyUnmaskedFragment on Query {
  currentBackofficeAgent {
    name
  }
}
query WithRelayDirectiveQuery {
  ...MyUnmaskedFragment @relay(mask: false)
  ...MyMaskedFragment @relay(mask: true)
  ...MyAlwaysMaskedFragment
  ...MyAlwaysUnmaskedFragment

  posts {
    ...MyPluralFragment
  }
}

fragment MyAlwaysMaskedFragment on Query @relay(mask: true) {
  currentBackofficeAgent {
    name
  }
}
fragment MyAlwaysUnmaskedFragment on Query @relay(mask: false) {
  currentBackofficeAgent {
    name
  }
}

fragment MyPluralFragment on Post @relay(plural: true) {
  title
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
public class WithRelayDirectiveQuery extends Request {

  public WithRelayDirectiveQuery() {
    super(
      "WithRelayDirectiveQuery",
      Fragment
        .builder()
        .name("WithRelayDirectiveQuery")
        .masked(true)
        .plural(false)
        .selections(
          Arrays.asList(
            LinkedField
              .builder()
              .name("currentBackofficeAgent")
              .alias("currentBackofficeAgent")
              .selections(
                Arrays.asList(
                  ScalarField.builder().name("name").alias("name").build()
                )
              )
              .build(),
            LinkedField
              .builder()
              .name("posts")
              .alias("posts")
              .selections(
                Arrays.asList(
                  FragmentSpread.builder().name("MyPluralFragment").build()
                )
              )
              .build(),
            FragmentSpread.builder().name("MyMaskedFragment").build(),
            FragmentSpread.builder().name("MyAlwaysMaskedFragment").build(),
            FragmentSpread.builder().name("MyAlwaysUnmaskedFragment").build()
          )
        )
        .build()
    );
  }
}


public class MyMaskedFragment extends Fragment {

  public MyMaskedFragment() {
    super(
      "MyMaskedFragment",
      true,
      false,
      Arrays.asList(
        LinkedField
          .builder()
          .name("currentBackofficeAgent")
          .alias("currentBackofficeAgent")
          .selections(
            Arrays.asList(ScalarField.builder().name("id").alias("id").build())
          )
          .build()
      )
    );
  }
}


public class MyAlwaysMaskedFragment extends Fragment {

  public MyAlwaysMaskedFragment() {
    super(
      "MyAlwaysMaskedFragment",
      true,
      false,
      Arrays.asList(
        LinkedField
          .builder()
          .name("currentBackofficeAgent")
          .alias("currentBackofficeAgent")
          .selections(
            Arrays.asList(
              ScalarField.builder().name("name").alias("name").build()
            )
          )
          .build()
      )
    );
  }
}


public class MyAlwaysUnmaskedFragment extends Fragment {

  public MyAlwaysUnmaskedFragment() {
    super(
      "MyAlwaysUnmaskedFragment",
      false,
      false,
      Arrays.asList(
        LinkedField
          .builder()
          .name("currentBackofficeAgent")
          .alias("currentBackofficeAgent")
          .selections(
            Arrays.asList(
              ScalarField.builder().name("name").alias("name").build()
            )
          )
          .build()
      )
    );
  }
}


public class MyPluralFragment extends Fragment {

  public MyPluralFragment() {
    super(
      "MyPluralFragment",
      true,
      true,
      Arrays.asList(ScalarField.builder().name("title").alias("title").build())
    );
  }
}

`;
